#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;

int findPar(int u, vector<int> &parent)
{
    if (parent[u] == u)
    {
        return u;
    }

    return parent[u] = findPar(parent[u], parent);
}

void unionn(int u, int v, vector<int> &parent, vector<int> &size)
{
    u = findPar(u, parent);
    v = findPar(v, parent);

    if (u != v)
    {
        if (size[u] < size[v])
        {
            parent[u] = v;
            size[v] += size[u];
        }

        else // for(u>u or u==v size )
        {
            parent[v] = u;
            size[u] += size[v];
        }
    }
}

int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial)
{
    int n = graph.size();

    vector<int> parent(n);
    vector<int> size(n);

    for (int i = 0; i < n; i++)
    {
        parent[i] = i;
        size[i] = 1;
    }

    unordered_set<int> st;

    for (int s : initial)
    {
        st.insert(s);
    }

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (graph[i][j] == 1 and st.find(i) == st.end() and st.find(j) == st.end()) // only insert those who have no malware
            {
                unionn(i, j, parent, size);
            }
        }
    }

    unordered_map<int, unordered_set<int>> mp;

    vector<int> infected(n);

    for (int u : initial)
    {
        for (int j = 0; j < n; j++)
        {
            if (graph[u][j] == 1 and u != j)
            {
                int p = findPar(j, parent);

                mp[u].insert(p);
            }
        }
    }
}

int main()
{

    return 0;
}